from aiogram import types
from aiogram.filters.callback_data import CallbackData
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, ReplyKeyboardRemove

from functions.cart_crud import get_cart_by_driver_id, get_carts_by_office_id
from functions.driver_crud import get_drivers_by_carts
from functions.employee_crud import get_employee_by_telegram_id
from functions.employee_menu import give_gift, remove_gift
from keyboards.default.employee_menu_default_keyboards import *
from keyboards.inline.employee_menu_keyboards import driver_list_keyboard, cart_product_list_keyboard

texts = {
    "select_driver": "–í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–¥–∏—Ç–µ–ª—è",
    "choose_driver_gift": "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∞—Ä–æ–∫ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã –≤–æ–¥–∏—Ç–µ–ª—è.",
    "driver_gift_selection": "‚úî –í—ã –≤—ã–±—Ä–∞–ª–∏ –≤–æ–¥–∏—Ç–µ–ª—è {first_name} –∏ –ø–æ–¥–∞—Ä–æ–∫ {title} –∏–∑ –µ–≥–æ –∫–æ—Ä–∑–∏–Ω—ã.\n\n–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –∑–∞–±—Ä–∞—Ç—å –ø–æ–¥–∞—Ä–æ–∫ –∑–∞ –¥–µ–Ω—å–≥–∏, –≤–æ–∑—å–º–∏—Ç–µ —É –Ω–µ–≥–æ\n{quantity}—à—Ç * {price} —Å—É–º = {total_price} —Å—É–º.",
    "choose_action": "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ",
    "not_enough_points": "‚õî –£ –≤–æ–¥–∏—Ç–µ–ª—è –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å –æ—á–∫–æ–≤.\n–í—ã –º–æ–∂–µ—Ç–µ –≤—ã–¥–∞—Ç—å –µ–º—É –ø–æ–¥–∞—Ä–æ–∫ –∑–∞ –¥–µ–Ω—å–≥–∏ –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –≤–æ–¥–∏—Ç–µ–ª—é —É–±—Ä–∞—Ç—å –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –ø–æ–¥–∞—Ä–∫–∏, —á—Ç–æ–± –±–∞–ª–∞–Ω—Å —Å—Ç–∞–ª –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º.\n\n–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –∑–∞–±—Ä–∞—Ç—å –ø–æ–¥–∞—Ä–æ–∫ –∑–∞ –¥–µ–Ω—å–≥–∏, –≤–æ–∑—å–º–∏—Ç–µ —É –Ω–µ–≥–æ\n{quantity}—à—Ç * {price} —Å—É–º = {total_price} —Å—É–º.",
    "gift_for_money_confirmation": "‚úÖ –í—ã –≤—ã–¥–∞–ª–∏ –ø–æ–¥–∞—Ä–æ–∫ –∑–∞ –¥–µ–Ω—å–≥–∏. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤–µ—Ä–Ω—É–ª–∏—Å—å –∑–∞–º–æ—Ä–æ–∂–µ–Ω–Ω—ã–µ –æ—á–∫–∏.\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –≤–∞–º {total_price} —Å—É–º.",
    "gift_for_scores_confirmation": "‚úÖ –í—ã –≤—ã–¥–∞–ª–∏ –ø–æ–¥–∞—Ä–æ–∫ –∑–∞ –æ—á–∫–∏.",
    "gift_was_not_given": "–ü–æ–¥–∞—Ä–æ–∫ –Ω–µ –±—ã–ª –≤—ã–¥–∞–Ω",
    "remove_gift_confirmation": "‚ùó‚úÖ –í—ã —É–¥–∞–ª–∏–ª–∏ –ø–æ–¥–∞—Ä–æ–∫ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.",
    "no_drivers": "ü§î –ù–∏ –æ–¥–∏–Ω –≤–æ–¥–∏—Ç–µ–ª—å –Ω–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–ª –ø–æ–¥–∞—Ä–∫–∏ –∏–∑ –≤–∞—à–µ–≥–æ –æ—Ñ–∏—Å–∞."
}


async def employee_menu_handler(message: types.Message, state: FSMContext):
    if message.content_type == 'text':
        text = message.text
        if text == TEXT_SELECT_DRIVER:
            current_user, current_employee = get_employee_by_telegram_id(message.chat.id)
            carts = get_carts_by_office_id(current_employee['office_id'])
            drivers = get_drivers_by_carts(carts)
            await state.update_data({'drivers': drivers})
            if not drivers:
                await message.answer(texts["no_drivers"], reply_markup=driver_list_keyboard(drivers))
                return
            await message.answer(texts["select_driver"], reply_markup=driver_list_keyboard(drivers))
            return


async def employee_menu_callback_handler(callback_query: CallbackQuery, state: FSMContext):
    await callback_query.message.delete()
    await employee_menu_handler(callback_query.message, state)


async def employee_driver_list_callback_handler(callback_query: CallbackQuery, state: FSMContext):
    current_user, current_employee = get_employee_by_telegram_id(callback_query.message.chat.id)

    carts = get_carts_by_office_id(current_employee['office_id'])
    drivers = get_drivers_by_carts(carts)
    await state.update_data({'drivers': drivers})
    await callback_query.message.delete()
    await callback_query.message.answer(texts["select_driver"], reply_markup=driver_list_keyboard(drivers))


async def choose_driver_handler(callback_query: CallbackQuery, callback_data: CallbackData, state: FSMContext):
    data = await state.get_data()
    drivers = data.get('drivers')
    current_user, current_employee = get_employee_by_telegram_id(callback_query.message.chat.id)
    chosen_driver = next(driver for driver in drivers if driver['id'] == callback_data.driver)

    chosen_driver_cart = get_cart_by_driver_id(chosen_driver['id'])
    relevant_cart_products = [cart_product for cart_product in chosen_driver_cart['cart_products'] if
                              cart_product['office_id'] == current_employee['office_id']]
    await state.update_data({'chosen_driver_cart': chosen_driver_cart, 'chosen_driver': chosen_driver})
    await callback_query.message.edit_text(texts["choose_driver_gift"],
                                           reply_markup=cart_product_list_keyboard(relevant_cart_products))


async def give_product_handler(callback_query: CallbackQuery, callback_data: CallbackData, state: FSMContext):
    data = await state.get_data()
    cart_products = data.get('chosen_driver_cart')['cart_products']
    chosen_driver = data.get('chosen_driver')

    chosen_cart_product = next(
        cart_product for cart_product in cart_products if cart_product['id'] == callback_data.cart_product)
    await state.update_data({'chosen_cart_product': chosen_cart_product})

    price = chosen_cart_product['product']['money_price']
    quantity = chosen_cart_product['quantity']
    message = await callback_query.message.edit_text(

        texts["driver_gift_selection"].format(first_name=chosen_driver['first_name'],
                                              title=chosen_cart_product['product']['title'],
                                              quantity=quantity,
                                              price=price,
                                              total_price=price * quantity),
        reply_markup=None)
    await state.update_data({'delete_message_id': message.message_id})

    await callback_query.message.answer(texts["choose_action"], reply_markup=get_employee_actions())
    await state.set_state('choose_action')


async def choose_action_handler(message: types.Message, state: FSMContext):
    if message.content_type == 'text':
        data = await state.get_data()
        chosen_cart_product = data.get('chosen_cart_product')
        text = message.text
        if text == TEXT_GIFT_FOR_SCORES:
            response = give_gift(chosen_cart_product)
            if not response:
                price = chosen_cart_product['product']['money_price']
                quantity = chosen_cart_product['quantity']
                await message.answer(texts["not_enough_points"].format(
                                              quantity=quantity,
                                              price=price,
                                              total_price=price * quantity))
                return

            await message.answer(texts["gift_for_scores_confirmation"], reply_markup=get_employee_menu())
            await state.set_state('employee_menu')
            return
        if text == TEXT_GIFT_FOR_MONEY:
            give_gift(chosen_cart_product, True)
            await message.answer(texts["gift_for_money_confirmation"].format(
                total_price=chosen_cart_product['quantity'] * chosen_cart_product['product']['money_price']),
                reply_markup=get_employee_menu())
            await state.set_state('employee_menu')
            return
        if text == TEXT_BACK:
            current_user, current_employee = get_employee_by_telegram_id(message.chat.id)
            data = await state.get_data()
            chosen_driver_cart = data.get('chosen_driver_cart')
            relevant_cart_products = [cart_product for cart_product in chosen_driver_cart['cart_products'] if
                                      cart_product['office_id'] == current_employee['office_id']]
            await message.answer(texts["gift_was_not_given"], reply_markup=ReplyKeyboardRemove())
            await message.answer(texts["choose_driver_gift"],
                                 reply_markup=cart_product_list_keyboard(relevant_cart_products))

            return
